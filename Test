import tkinter as tk
from tkinter import scrolledtext
from google import genai

# ------------------- Gemini Client Setup -------------------
API_KEY = "YOUR_API_KEY_HERE"  # Replace with your Gemini API key
client = genai.Client(api_key='AIzaSyAiMOlljwzoTAtPjqJdsmmqF1PDsxqB2qY')
MODEL_NAME = "gemini-2.5-flash"

# ------------------- Functions -------------------
def send_message():
    user_msg = user_input.get().strip()
    if not user_msg:
        return

    # Display user message in chat
    chat_area.configure(state='normal')
    chat_area.insert(tk.END, f"You: {user_msg}\n")
    chat_area.configure(state='disabled')
    chat_area.see(tk.END)
    user_input.delete(0, tk.END)

    # Get AI response
    try:
        response = client.models.generate_content(
            model=MODEL_NAME,
            contents=user_msg
        )
        ai_msg = response.text
    except Exception as e:
        ai_msg = f"Error: {e}"

    # Display AI response in chat
    chat_area.configure(state='normal')
    chat_area.insert(tk.END, f"AI: {ai_msg}\n\n")
    chat_area.configure(state='disabled')
    chat_area.see(tk.END)

# ------------------- Tkinter GUI -------------------
root = tk.Tk()
root.title("Chetan's Bot")
root.geometry("500x600")

# Chat display area
chat_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, state='disabled')
chat_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# User input
user_input = tk.Entry(root, width=60)
user_input.pack(padx=10, pady=(0, 10), side=tk.LEFT, expand=True, fill=tk.X)
user_input.bind("<Return>", lambda event: send_message())

# Send button
send_button = tk.Button(root, text="Send", command=send_message)
send_button.pack(padx=10, pady=(0, 10), side=tk.RIGHT)

# Run the GUI loop
root.mainloop()



Chetan.py

import tkinter as tk
from threading import Thread
from google import genai
import time

#API_KEY = "YOUR_API_KEY_HERE"
MODEL_NAME = "gemini-2.5-flash"
client = genai.Client(api_key='AIzaSyAiMOlljwzoTAtPjqJdsmmqF1PDsxqB2qY')

# ---------------- GUI ----------------
root = tk.Tk()
root.title("Chetan's AI Chatbot")
root.geometry("500x600")
root.configure(bg="#2c2c2c")

chat_area = tk.Text(root, state="disabled", bg="#1f1f1f", fg="white", font=("Helvetica", 12))
chat_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

input_frame = tk.Frame(root, bg="#2c2c2c")
input_frame.pack(fill=tk.X, padx=10, pady=(0,10))

user_input = tk.Entry(input_frame, font=("Helvetica", 12))
user_input.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0,10))


# ---------------- FUNCTIONS ----------------
typing_index = None

def add_message(sender, message, sender_type="bot"):
    chat_area.configure(state="normal")
    timestamp = time.strftime("%H:%M")
    chat_area.insert(tk.END, f"{sender} ({timestamp}): {message}\n")
    chat_area.configure(state="disabled")
    chat_area.see(tk.END)

def replace_typing(ai_msg):
    global typing_index
    if typing_index:
        chat_area.configure(state="normal")
        chat_area.delete(f"{typing_index} linestart", f"{typing_index} lineend+1c")
        add_message("AI", ai_msg, "bot")
        chat_area.configure(state="disabled")
        chat_area.see(tk.END)
        typing_index = None

def get_ai_response(user_msg):
    global typing_index
    try:
        response = client.models.generate_content(
            model=MODEL_NAME,
            contents=user_msg
        )
        ai_msg = response.text
    except Exception as e:
        ai_msg = f"Error: {e}"

    root.after(0, lambda: replace_typing(ai_msg))

def send_message():
    global typing_index
    user_msg = user_input.get().strip()
    if not user_msg:
        return

    add_message("You", user_msg, "user")
    user_input.delete(0, tk.END)

    # Typing indicator
    chat_area.configure(state="normal")
    chat_area.insert(tk.END, "AI: Typing...\n")
    chat_area.configure(state="disabled")
    chat_area.see(tk.END)

    typing_index = chat_area.index("end-2l")

    Thread(target=get_ai_response, args=(user_msg,)).start()


# ---------------- BUTTON ----------------
send_button = tk.Button(
    input_frame, text="Send", bg="#d32f2f", fg="white",
    font=("Helvetica", 12), command=send_message
)
send_button.pack(side=tk.RIGHT)

user_input.bind("<Return>", lambda e: send_message())

root.mainloop()
